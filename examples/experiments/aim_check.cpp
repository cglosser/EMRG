#include <iomanip>
#include <iostream>
#include <limits>
#include <vector>

#include "interactions/AIM/aim_interaction.h"
#include "interactions/direct_interaction.h"
#include "math_utils.h"

using dbl = std::numeric_limits<double>;

// 256 points distributed evenly on [0, 100]
std::vector<Eigen::Vector3d> pos = {
    {1.63, 1.43, 11.64},   {11.1, 5.49, 0.6},     {18.45, 2.94, 4.42},
    {0.52, 16.99, 22.84},  {22.07, 18.16, 3.63},  {20.91, 8.93, 19.99},
    {11.04, 25.62, 14.3},  {25.59, 22.72, 3.73},  {31.2, 6.68, 15.8},
    {5.72, 20.68, 28.84},  {5.07, 29.92, 19.54},  {2.34, 2.32, 43.53},
    {19.55, 34.51, 19.65}, {10.09, 42.19, 21.64}, {22.12, 40.64, 16.25},
    {2.39, 3.12, 49.23},   {40.68, 18.13, 26.6},  {34.63, 8.07, 38.26},
    {30.22, 44.83, 7.17},  {14.89, 43.2, 30.1},   {51.51, 18.87, 2.43},
    {49.31, 24.38, 2.3},   {18.24, 50.8, 13.28},  {53.94, 16.25, 6.31},
    {1.79, 57.14, 2.48},   {1.73, 22.69, 52.59},  {23.4, 42.01, 32.47},
    {31., 34.6, 36.5},     {32.08, 0.86, 49.66},  {48.88, 12.01, 34.09},
    {29.12, 54.64, 6.35},  {3.02, 3.72, 62.37},   {45.95, 25.69, 35.41},
    {9.82, 60.87, 17.46},  {35.5, 49.06, 21.91},  {42.17, 27.78, 40.83},
    {39.44, 51.29, 7.64},  {25.99, 7.89, 59.22},  {12.31, 42.63, 48.31},
    {64.04, 13.51, 7.33},  {48.22, 30.04, 33.5},  {6.64, 60.09, 26.66},
    {50.8, 37.75, 19.6},   {32.14, 57.68, 6.8},   {44.42, 28.2, 40.64},
    {42.39, 14.61, 51.76}, {25.36, 44.38, 45.82}, {47.84, 47.6, 13.6},
    {48.2, 48.85, 6.22},   {11.04, 49.25, 46.95}, {9.83, 38.46, 56.4},
    {47.28, 49.62, 9.82},  {4.65, 3.47, 71.1},    {16.32, 60.65, 34.99},
    {32.88, 8.21, 64.05},  {45.58, 56.35, 2.84},  {17.81, 65.51, 26.85},
    {33.6, 58.12, 30.57},  {32.28, 50.62, 43.18}, {21.2, 70.28, 11.39},
    {23.27, 57.74, 41.07}, {49.34, 24.23, 50.65}, {35.06, 66.09, 3.52},
    {53.57, 53.02, 5.95},  {10.7, 47.7, 58.12},   {51.74, 32.82, 45.13},
    {34.53, 65.89, 19.04}, {38.98, 51.45, 42.04}, {46.68, 59.8, 13.95},
    {48.38, 46.2, 39.22},  {75.67, 6.43, 15.93},  {49.06, 46.1, 38.99},
    {37.14, 44.01, 52.52}, {45., 60.94, 20.31},   {70.41, 7.71, 34.31},
    {47.89, 52.46, 34.53}, {76.89, 8.26, 16.11},  {34.79, 49.69, 50.99},
    {25.66, 37.64, 64.91}, {18.72, 11.1, 76.51},  {69.42, 7.2, 39.25},
    {72.38, 20.66, 27.61}, {60.46, 37.33, 37.7},  {65.75, 30.56, 35.15},
    {48.17, 63.73, 13.07}, {78.39, 20.52, 0.82},  {29.11, 70.12, 29.39},
    {20.24, 29.71, 73.14}, {31.71, 74.26, 14.47}, {72.53, 38.72, 5.3},
    {31.53, 59.16, 49.3},  {51.46, 10.29, 65.36}, {19.39, 76.25, 29.53},
    {77.72, 14.43, 28.55}, {29.77, 55.14, 56.03}, {48.76, 22.38, 65.31},
    {50.33, 16.18, 66.22}, {44.81, 15.98, 70.31}, {33.41, 78.01, 8.29},
    {22.3, 55.46, 61.82},  {29.42, 14.74, 79.72}, {43.6, 70.54, 26.17},
    {43.25, 75.3, 5.9},    {50.24, 68.58, 19.64}, {79.55, 14.99, 36.35},
    {83.4, 30.08, 7.82},   {77.49, 34.03, 28.97}, {59.54, 66.98, 1.32},
    {24.49, 78.55, 37.51}, {79.62, 32.35, 29.14}, {29.72, 85.72, 4.57},
    {28.16, 82.29, 27.23}, {24.37, 35.94, 80.29}, {57.88, 26.06, 65.76},
    {38.68, 28.18, 78.13}, {10.2, 89.36, 18.54},  {86.01, 22.46, 23.63},
    {64.02, 13.84, 64.61}, {51.31, 6.62, 76.11},  {66.69, 62.28, 12.88},
    {62.33, 27.81, 62.26}, {89.03, 17.38, 18.29}, {70.3, 54.95, 26.09},
    {43.62, 81.78, 10.86}, {40.45, 5.27, 84.91},  {24.85, 56.07, 71.86},
    {74.4, 23.17, 54.21},  {91.18, 12.81, 26.79}, {61.3, 71.85, 16.92},
    {14.29, 89.2, 32.41},  {37.3, 50.27, 72.77},  {56.45, 36.7, 69.11},
    {51.46, 47.98, 66.65}, {92., 30.71, 12.41},   {34.46, 91.51, 0.55},
    {14.86, 91.74, 30.64}, {83.57, 48.29, 16.17}, {50.49, 81.52, 20.64},
    {66.48, 71.32, 13.79}, {38.22, 82.91, 36.98}, {11.78, 87.97, 42.97},
    {28.88, 93.85, 9.63},  {7.56, 75.79, 62.77},  {73.35, 53.79, 38.87},
    {93.12, 33.79, 2.74},  {74.89, 54.42, 36.68}, {30.37, 66.18, 68.04},
    {93.04, 35.4, 4.9},    {53.59, 81.79, 20.53}, {14.05, 54.63, 82.48},
    {47.71, 35.99, 80.22}, {88.22, 4.51, 47.65},  {18.66, 86.44, 48.73},
    {69.91, 39.01, 62.18}, {7.65, 18.91, 99.58},  {25.9, 96.68, 18.23},
    {5.75, 58.63, 83.06},  {49.81, 83.05, 32.1},  {57.66, 82.3, 18.79},
    {60.03, 10.81, 82.21}, {9.47, 91.9, 44.11},   {3.25, 40.53, 94.4},
    {10.02, 87.53, 53.02}, {28.74, 75.4, 63.89},  {29.65, 99.62, 2.51},
    {70.02, 77.24, 3.36},  {39.25, 96.04, 11.55}, {22.49, 66.83, 76.98},
    {9.64, 76.76, 70.17},  {37.09, 97.35, 8.5},   {46.61, 91.67, 18.7},
    {47.79, 61.15, 70.04}, {38.36, 94.14, 24.78}, {39.66, 57.91, 78.26},
    {85.74, 61.84, 1.9},   {96.21, 20.79, 40.64}, {83.41, 30.27, 60.38},
    {94.89, 2.47, 50.43},  {74.35, 75.14, 23.56}, {15.28, 41.49, 98.96},
    {33.57, 37.36, 96.6},  {92.67, 40.98, 39.99}, {81.38, 49.63, 53.3},
    {47.21, 90.78, 38.81}, {44.48, 99.58, 13.96}, {77.92, 19.01, 75.37},
    {64.88, 88.48, 11.82}, {83.23, 24.84, 68.7},  {88.05, 55., 42.31},
    {11.12, 83.87, 73.92}, {50.24, 97.54, 25.2},  {85.03, 68.04, 28.71},
    {5.79, 96.38, 58.59},  {69.99, 84.26, 27.89}, {51.93, 25.68, 97.14},
    {11.03, 74.18, 85.74}, {52.43, 18.26, 99.5},  {91.29, 66.51, 15.13},
    {31.39, 48.33, 98.4},  {56.38, 87.3, 47.14},  {92.21, 26.35, 62.76},
    {22.29, 97.13, 59.01}, {68.77, 74.47, 56.99}, {90.67, 69.73, 21.48},
    {98.34, 32.21, 53.56}, {73.36, 60.61, 67.43}, {53.24, 84.01, 61.33},
    {57.24, 21.39, 99.73}, {25.47, 97.96, 59.28}, {49.84, 72.3, 77.88},
    {89.31, 57.35, 51.22}, {46.89, 75.7, 78.03},  {89.15, 48.8, 62.09},
    {56.99, 85.03, 61.03}, {90.79, 27.79, 72.44}, {54.58, 94.75, 48.44},
    {62.21, 60.96, 84.29}, {95.86, 66.49, 32.98}, {99.74, 65.94, 21.19},
    {80.84, 43.69, 79.59}, {68.05, 97.26, 26.25}, {93.11, 62.31, 48.99},
    {88.79, 84.96, 0.66},  {22.89, 78.82, 93.13}, {57.66, 93.52, 58.04},
    {70.29, 73.18, 72.89}, {86.99, 52.98, 72.36}, {60.93, 88.88, 65.25},
    {63.23, 65.84, 86.95}, {87.81, 73.3, 54.96},  {62.28, 66.51, 89.94},
    {48.84, 82.71, 85.75}, {72.45, 92.47, 53.},   {66.56, 98.28, 52.96},
    {98.27, 3.62, 85.78},  {73.73, 75.16, 79.72}, {90.07, 91.56, 32.63},
    {90.07, 89.61, 40.78}, {36.81, 87.28, 94.68}, {74.33, 50.5, 99.89},
    {28.56, 91.71, 93.99}, {91.48, 63.61, 78.25}, {76.1, 85.36, 75.2},
    {97.68, 94.34, 18.62}, {99.81, 95.67, 26.25}, {83.54, 95.68, 60.79},
    {72.26, 70.96, 98.77}, {68.62, 84.31, 90.69}, {92.01, 49., 99.7},
    {87.59, 97.17, 61.07}, {89.12, 77.18, 87.78}, {99.64, 91.84, 59.05},
    {72.86, 93.01, 90.37}, {86.81, 90.81, 81.62}, {74.21, 91.98, 99.95},
    {96.59, 85.98, 98.}};

class Gaussian {
 public:
  Gaussian(double mu, double sigma) : mu(mu), sigma(sigma){};
  double operator()(double t) const { return gaussian((t - mu) / sigma); }
 private:
  double mu, sigma;
};

int main()
{
  const int interpolation_order = 4, expansion_order = 1, num_steps = 1024,
            num_dots = 16;
  const double c = 1, dt = 1, total_time = num_steps * dt, omega = 0;
  const Gaussian source(total_time / 2.0, total_time / 12.0);

  const Eigen::Array3d spacing(1.5, 1.5, 1.5);

  auto dots = std::make_shared<DotVector>();
  // for(int i = 0; i < 20; ++i) {
  // dots->push_back(QuantumDot(pos[i], omega, {0, 0}, {0, 0, 1}));
  //}
  dots->push_back(QuantumDot({0.0, 0.0, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 0.0, 1.2}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 1.2, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({1.2, 0.0, 0.0}, omega, {0, 0}, {0, 0, 1}));

  dots->push_back(QuantumDot({0.0, 0.0, 10.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 0.0, 8.8}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 1.2, 10.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({1.2, 0.0, 10.0}, omega, {0, 0}, {0, 0, 1}));

  dots->push_back(QuantumDot({0.0, 10.0, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 10.0, 1.2}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({0.0, 8.8, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({1.2, 10.0, 0.0}, omega, {0, 0}, {0, 0, 1}));

  dots->push_back(QuantumDot({10.0, 0.0, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({10.0, 0.0, 1.2}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({10.0, 1.2, 0.0}, omega, {0, 0}, {0, 0, 1}));
  dots->push_back(QuantumDot({8.8, 0.0, 0.0}, omega, {0, 0}, {0, 0, 1}));

  auto history = std::make_shared<Integrator::History<Eigen::Vector2cd>>(
      num_dots, 10, num_steps);
  for(int d = 0; d < num_dots; ++d) {
    for(int t = -10; t < num_steps; ++t) {
      history->array_[d][t][0](RHO_01) = source(t * dt);
    }
  }

  Propagation::Laplace<cmplx> laplace;

  DirectInteraction direct(dots, history, laplace, interpolation_order, c, dt);

  std::ofstream direct_fd("direct.dat");
  direct_fd.precision(17);
  for(int t = 0; t < num_steps; ++t) {
    direct_fd << direct.evaluate(t).transpose() << std::endl;
  }

  AIM::Grid grid(spacing, expansion_order, *dots);
  auto expansions =
      AIM::Expansions::LeastSquaresExpansionSolver::get_expansions(
          expansion_order, grid, *dots);

  AIM::DirectInteraction di(dots, history, laplace, interpolation_order, 1, c,
                            dt, grid);
  AIM::Nearfield nf(dots, history, interpolation_order, 1, c, dt, grid,
                    expansions,
                    AIM::Expansions::Retardation(grid.max_transit_steps(c, dt) +
                                                 interpolation_order),
                    AIM::normalization::Laplace());
  AIM::Farfield ff(dots, history, interpolation_order, c, dt, grid, expansions,
                   AIM::Expansions::Retardation(grid.max_transit_steps(c, dt) +
                                                interpolation_order),
                   AIM::normalization::Laplace());

  std::ofstream comparison("comparison.dat");
  comparison.precision(17);
  for(int t = 0; t < num_steps; ++t) {
    std::cout << t << std::endl;
    comparison << direct.evaluate(t)(1).real() << " "
               << (di.evaluate(t) + (ff.evaluate(t) - nf.evaluate(t)))(1).real()
               << " | " << di.evaluate(t)(1).real() << " "
               << ff.evaluate(t)(1).real() << " " << nf.evaluate(t)(1).real()
               << std::endl;
  }

  return 0;
}
