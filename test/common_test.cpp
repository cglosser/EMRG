#include <boost/test/unit_test.hpp>
#include <iostream>

#include "common.h"

BOOST_AUTO_TEST_SUITE(common)

BOOST_AUTO_TEST_CASE(circulant_mirror)
{
  std::array<int, 4> dims = {1, 3, 4, 5};
  std::array<int, 4> double_dims = {1, 6, 8, 10};
  SpacetimeVector<int> stv(double_dims);

  std::fill(stv.data(), stv.data() + stv.num_elements(), 0);

  int i = 1;
  for(int t = 0; t < dims[0]; ++t) {
    for(int x = 0; x < dims[1]; ++x) {
      for(int y = 0; y < dims[2]; ++y) {
        for(int z = 0; z < dims[3]; ++z) {
          stv[t][x][y][z] = i++;
        }
      }
    }
  }

  fill_circulant_mirror(stv);

  // Built using substitution rules in Mathematica
  // clang-format off
  std::vector<int> check = {
    1, 2, 3, 4, 5, 0, 5, 4, 3, 2, 6, 7, 8, 9, 10, 0, 10, 9, 8, 7, 11,
    12, 13, 14, 15, 0, 15, 14, 13, 12, 16, 17, 18, 19, 20, 0, 20, 19, 18,
    17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 19, 20, 0, 20, 19, 18,
    17, 11, 12, 13, 14, 15, 0, 15, 14, 13, 12, 6, 7, 8, 9, 10, 0, 10, 9,
    8, 7, 21, 22, 23, 24, 25, 0, 25, 24, 23, 22, 26, 27, 28, 29, 30, 0,
    30, 29, 28, 27, 31, 32, 33, 34, 35, 0, 35, 34, 33, 32, 36, 37, 38,
    39, 40, 0, 40, 39, 38, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38,
    39, 40, 0, 40, 39, 38, 37, 31, 32, 33, 34, 35, 0, 35, 34, 33, 32, 26,
    27, 28, 29, 30, 0, 30, 29, 28, 27, 41, 42, 43, 44, 45, 0, 45, 44, 43,
    42, 46, 47, 48, 49, 50, 0, 50, 49, 48, 47, 51, 52, 53, 54, 55, 0, 55,
    54, 53, 52, 56, 57, 58, 59, 60, 0, 60, 59, 58, 57, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 56, 57, 58, 59, 60, 0, 60, 59, 58, 57, 51, 52, 53, 54,
    55, 0, 55, 54, 53, 52, 46, 47, 48, 49, 50, 0, 50, 49, 48, 47, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 44, 45, 0, 45, 44, 43, 42, 46,
    47, 48, 49, 50, 0, 50, 49, 48, 47, 51, 52, 53, 54, 55, 0, 55, 54, 53,
    52, 56, 57, 58, 59, 60, 0, 60, 59, 58, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 56, 57, 58, 59, 60, 0, 60, 59, 58, 57, 51, 52, 53, 54, 55, 0, 55,
    54, 53, 52, 46, 47, 48, 49, 50, 0, 50, 49, 48, 47, 21, 22, 23, 24,
    25, 0, 25, 24, 23, 22, 26, 27, 28, 29, 30, 0, 30, 29, 28, 27, 31, 32,
    33, 34, 35, 0, 35, 34, 33, 32, 36, 37, 38, 39, 40, 0, 40, 39, 38, 37,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 0, 40, 39, 38, 37,
    31, 32, 33, 34, 35, 0, 35, 34, 33, 32, 26, 27, 28, 29, 30, 0, 30, 29,
    28, 27
  };
  // clang-format on

  for(size_t i = 0; i < check.size(); ++i) {
    BOOST_CHECK_EQUAL(check.at(i), stv.data()[i]);
  }
}

BOOST_AUTO_TEST_SUITE_END()  // common
